// Code generated by engine.go; DO NOT EDIT.

package api

import (
	"github.com/hashicorp/terraform/helper/schema"
	"github.com/hashicorp/terraform/helper/validation"
)

func schemaStringOptional() *schema.Schema {
	return &schema.Schema{
		Type:     schema.TypeString,
		Optional: true,
	}
}

func schemaStringOptionalDefault(def string) *schema.Schema {
	return &schema.Schema{
		Type:     schema.TypeString,
		Optional: true,
		Default:  def,
	}
}

func schemaStringRequired() *schema.Schema {
	return &schema.Schema{
		Type:     schema.TypeString,
		Required: true,
	}
}

func schemaStringOptionalComputed() *schema.Schema {
	return &schema.Schema{
		Type:     schema.TypeString,
		Optional: true,
		Computed: true,
	}
}

func schemaStringComputed() *schema.Schema {
	return &schema.Schema{
		Type:     schema.TypeString,
		Computed: true,
	}
}

func schemaCIDRStringRequired() *schema.Schema {
	return &schema.Schema{
		Type:         schema.TypeString,
		Required:     true,
		ValidateFunc: validation.CIDRNetwork(1, 32),
	}
}

func schemaCIDRStringOptional() *schema.Schema {
	return &schema.Schema{
		Type:         schema.TypeString,
		Optional:     true,
		ValidateFunc: validation.CIDRNetwork(1, 32),
	}
}

func schemaStringInSliceRequired(slice []string) *schema.Schema {
	return &schema.Schema{
		Type:         schema.TypeString,
		Required:     true,
		ValidateFunc: validation.StringInSlice(slice, false),
	}
}

func schemaStringInSliceOptional(slice []string) *schema.Schema {
	return &schema.Schema{
		Type:         schema.TypeString,
		Optional:     true,
		ValidateFunc: validation.StringInSlice(slice, false),
	}
}

func schemaStringInSliceOptionalDefault(slice []string, def string) *schema.Schema {
	return &schema.Schema{
		Type:         schema.TypeString,
		Optional:     true,
		ValidateFunc: validation.StringInSlice(slice, false),
		Default:      def,
	}
}

func schemaIntOptional() *schema.Schema {
	return &schema.Schema{
		Type:     schema.TypeInt,
		Optional: true,
	}
}

func schemaFloatOptional() *schema.Schema {
	return &schema.Schema{
		Type:     schema.TypeFloat,
		Optional: true,
	}
}

func schemaBoolOptional() *schema.Schema {
	return &schema.Schema{
		Type:     schema.TypeBool,
		Optional: true,
	}
}

func schemaBoolRequired() *schema.Schema {
	return &schema.Schema{
		Type:     schema.TypeBool,
		Required: true,
	}
}

func schemaStringSliceRequired() *schema.Schema {
	return &schema.Schema{
		Type:     schema.TypeList,
		Required: true,
		Elem:     &schema.Schema{Type: schema.TypeString},
	}
}

func schemaStringSliceOptional() *schema.Schema {
	return &schema.Schema{
		Type:     schema.TypeList,
		Optional: true,
		Elem:     &schema.Schema{Type: schema.TypeString},
	}
}

func schemaStringMap() *schema.Schema {
	return &schema.Schema{
		Type:     schema.TypeMap,
		Optional: true,
	}
}

func schemaInstanceGroupRoleOptional() *schema.Schema {
	return schemaStringInSliceRequired([]string{"Master", "Node", "Bastion"})
}

func schemaUidOptional() *schema.Schema {
	return schemaStringComputed()
}

func schemaUidRequired() *schema.Schema {
	return schemaStringComputed()
}

func schemaManagedFieldsOperationTypeOptional() *schema.Schema {
	return schemaStringInSliceOptional([]string{"Update", "Apply"})
}

func schemaLoadBalancerTypeOptional() *schema.Schema {
	return schemaStringInSliceOptional([]string{"Public", "Internal"})
}

func schemaEtcdProviderTypeOptional() *schema.Schema {
	return schemaStringInSliceOptional([]string{"Manager", "Legacy"})
}

func schemaSubnetTypeOptional() *schema.Schema {
	return schemaStringInSliceOptional([]string{"Public", "Private", "Utility"})
}

func schemaDnsTypeOptional() *schema.Schema {
	return schemaStringInSliceOptional([]string{"Public", "Private"})
}

func schemaStatusReasonOptional() *schema.Schema {
	return schemaStringInSliceOptional([]string{
		"", "Unauthorized", "Forbidden", "NotFound", "AlreadyExists",
		"Conflict", "Gone", "Invalid", "ServerTimeout", "Timeout",
		"TooManyRequests", "BadRequest", "MethodNotAllowed", "NotAcceptable",
		"RequestEntityTooLarge", "UnsupportedMediaType", "InternalError",
		"Expired", "ServiceUnavailable",
	})
}

func schemaCauseTypeOptional() *schema.Schema {
	return schemaStringInSliceOptional([]string{
		"FieldValueNotFound", "FieldValueRequired", "FieldValueDuplicate",
		"FieldValueInvalid", "FieldValueNotSupported", "UnexpectedServerResponse",
		"FieldManagerConflict",
	})
}
