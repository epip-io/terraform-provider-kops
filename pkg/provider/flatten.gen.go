// Code generated by engine.go; DO NOT EDIT.

package provider
import (
	"k8s.io/kops/pkg/apis/kops"

	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
)


func flattenBool(in *bool) interface{} {
	out := *in

	return out
}

func flattenFileAssetSpecSlice(in []kops.FileAssetSpec) []map[string]interface{} {
	out := make([]map[string]interface{}, len(in))

	for i := 0; i < len(out); i++ {
		out[i] = make(map[string]interface{})

		if 	in[i].Content != "" {
			out[i]["content"] = flattenString(in[i].Content)
		}

		if 	in[i].IsBase64 {
			out[i]["is_base_64"] = flattenBool(&in[i].IsBase64)
		}

		if 	in[i].Name != "" {
			out[i]["name"] = flattenString(in[i].Name)
		}

		if 	in[i].Path != "" {
			out[i]["path"] = flattenString(in[i].Path)
		}

		if 	in[i].Roles != nil {
			out[i]["roles"] = flattenInstanceGroupRoleSlice(in[i].Roles)
		}
	}

	return out
}

func flattenHookSpecSlice(in []kops.HookSpec) []map[string]interface{} {
	out := make([]map[string]interface{}, len(in))

	for i := 0; i < len(out); i++ {
		out[i] = make(map[string]interface{})

		if 	in[i].Before != nil {
			out[i]["before"] = flattenStringSlice(in[i].Before)
		}

		if 	in[i].Disabled {
			out[i]["disabled"] = flattenBool(&in[i].Disabled)
		}

		if 	in[i].ExecContainer != nil {
			out[i]["exec_container"] = flattenExecContainerAction(in[i].ExecContainer)
		}

		if 	in[i].Manifest != "" {
			out[i]["manifest"] = flattenString(in[i].Manifest)
		}

		if 	in[i].Name != "" {
			out[i]["name"] = flattenString(in[i].Name)
		}

		if 	in[i].Requires != nil {
			out[i]["requires"] = flattenStringSlice(in[i].Requires)
		}

		if 	in[i].Roles != nil {
			out[i]["roles"] = flattenInstanceGroupRoleSlice(in[i].Roles)
		}

		if 	in[i].UseRawManifest {
			out[i]["use_raw_manifest"] = flattenBool(&in[i].UseRawManifest)
		}
	}

	return out
}

func flattenInitializers(in *v1.Initializers) []map[string]interface{} {
	out := make([]map[string]interface{}, 1)

	for i := 0; i < len(out); i++ {
		out[i] = make(map[string]interface{})

		out[i]["pending"] = flattenInitializerSlice(in.Pending)

		if 	in.Result != nil {
			out[i]["result"] = flattenStatus(in.Result)
		}
	}

	return out
}

func flattenInt32(in int32) interface{} {
	out := in

	return out
}

func flattenInt64(in int64) interface{} {
	out := in

	return out
}

func flattenKubeletConfigSpec(in *kops.KubeletConfigSpec) []map[string]interface{} {
	out := make([]map[string]interface{}, 1)

	for i := 0; i < len(out); i++ {
		out[i] = make(map[string]interface{})

		if 	in.APIServers != "" {
			out[i]["api_servers"] = flattenString(in.APIServers)
		}

		if 	*in.AllowPrivileged {
			out[i]["allow_privileged"] = flattenBool(in.AllowPrivileged)
		}

		if 	in.AllowedUnsafeSysctls != nil {
			out[i]["allowed_unsafe_sysctls"] = flattenStringSlice(in.AllowedUnsafeSysctls)
		}

		if 	*in.AnonymousAuth {
			out[i]["anonymous_auth"] = flattenBool(in.AnonymousAuth)
		}

		if 	*in.AuthenticationTokenWebhook {
			out[i]["authentication_token_webhook"] = flattenBool(in.AuthenticationTokenWebhook)
		}

		if 	in.AuthenticationTokenWebhookCacheTTL != nil {
			out[i]["authentication_token_webhook_cache_ttl"] = flattenDuration(in.AuthenticationTokenWebhookCacheTTL)
		}

		if 	in.AuthorizationMode != "" {
			out[i]["authorization_mode"] = flattenString(in.AuthorizationMode)
		}

		if 	*in.BabysitDaemons {
			out[i]["babysit_daemons"] = flattenBool(in.BabysitDaemons)
		}

		if 	in.BootstrapKubeconfig != "" {
			out[i]["bootstrap_kubeconfig"] = flattenString(in.BootstrapKubeconfig)
		}

		if 	*in.CPUCFSQuota {
			out[i]["cpu_cfs_quota"] = flattenBool(in.CPUCFSQuota)
		}

		if 	in.CPUCFSQuotaPeriod != nil {
			out[i]["cpu_cfs_quota_period"] = flattenDuration(in.CPUCFSQuotaPeriod)
		}

		if 	in.CgroupRoot != "" {
			out[i]["cgroup_root"] = flattenString(in.CgroupRoot)
		}

		if 	in.ClientCAFile != "" {
			out[i]["client_ca_file"] = flattenString(in.ClientCAFile)
		}

		if 	in.CloudProvider != "" {
			out[i]["cloud_provider"] = flattenString(in.CloudProvider)
		}

		if 	in.ClusterDNS != "" {
			out[i]["cluster_dns"] = flattenString(in.ClusterDNS)
		}

		if 	in.ClusterDomain != "" {
			out[i]["cluster_domain"] = flattenString(in.ClusterDomain)
		}

		if 	*in.ConfigureCBR0 {
			out[i]["configure_cbr_0"] = flattenBool(in.ConfigureCBR0)
		}

		if 	in.CpuManagerPolicy != "" {
			out[i]["cpu_manager_policy"] = flattenString(in.CpuManagerPolicy)
		}

		if 	*in.DockerDisableSharedPID {
			out[i]["docker_disable_shared_pid"] = flattenBool(in.DockerDisableSharedPID)
		}

		if 	*in.EnableCustomMetrics {
			out[i]["enable_custom_metrics"] = flattenBool(in.EnableCustomMetrics)
		}

		if 	*in.EnableDebuggingHandlers {
			out[i]["enable_debugging_handlers"] = flattenBool(in.EnableDebuggingHandlers)
		}

		if 	in.EnforceNodeAllocatable != "" {
			out[i]["enforce_node_allocatable"] = flattenString(in.EnforceNodeAllocatable)
		}

		if 	*in.EvictionHard != "" {
			out[i]["eviction_hard"] = flattenString(*in.EvictionHard)
		}

		if 	in.EvictionMaxPodGracePeriod != 0 {
			out[i]["eviction_max_pod_grace_period"] = flattenInt32(in.EvictionMaxPodGracePeriod)
		}

		if 	in.EvictionMinimumReclaim != "" {
			out[i]["eviction_minimum_reclaim"] = flattenString(in.EvictionMinimumReclaim)
		}

		if 	in.EvictionPressureTransitionPeriod != nil {
			out[i]["eviction_pressure_transition_period"] = flattenDuration(in.EvictionPressureTransitionPeriod)
		}

		if 	in.EvictionSoft != "" {
			out[i]["eviction_soft"] = flattenString(in.EvictionSoft)
		}

		if 	in.EvictionSoftGracePeriod != "" {
			out[i]["eviction_soft_grace_period"] = flattenString(in.EvictionSoftGracePeriod)
		}

		if 	in.ExperimentalAllowedUnsafeSysctls != nil {
			out[i]["experimental_allowed_unsafe_sysctls"] = flattenStringSlice(in.ExperimentalAllowedUnsafeSysctls)
		}

		if 	*in.FailSwapOn {
			out[i]["fail_swap_on"] = flattenBool(in.FailSwapOn)
		}

		if 	in.FeatureGates != nil {
			out[i]["feature_gates"] = flattenStringMap(in.FeatureGates)
		}

		if 	in.HairpinMode != "" {
			out[i]["hairpin_mode"] = flattenString(in.HairpinMode)
		}

		if 	in.HostnameOverride != "" {
			out[i]["hostname_override"] = flattenString(in.HostnameOverride)
		}

		if 	*in.ImageGCHighThresholdPercent != 0 {
			out[i]["image_gc_high_threshold_percent"] = flattenInt32(*in.ImageGCHighThresholdPercent)
		}

		if 	*in.ImageGCLowThresholdPercent != 0 {
			out[i]["image_gc_low_threshold_percent"] = flattenInt32(*in.ImageGCLowThresholdPercent)
		}

		if 	in.ImagePullProgressDeadline != nil {
			out[i]["image_pull_progress_deadline"] = flattenDuration(in.ImagePullProgressDeadline)
		}

		if 	in.KubeReserved != nil {
			out[i]["kube_reserved"] = flattenStringMap(in.KubeReserved)
		}

		if 	in.KubeReservedCgroup != "" {
			out[i]["kube_reserved_cgroup"] = flattenString(in.KubeReservedCgroup)
		}

		if 	in.KubeconfigPath != "" {
			out[i]["kubeconfig_path"] = flattenString(in.KubeconfigPath)
		}

		if 	in.KubeletCgroups != "" {
			out[i]["kubelet_cgroups"] = flattenString(in.KubeletCgroups)
		}

		if 	*in.LogLevel != 0 {
			out[i]["log_level"] = flattenInt32(*in.LogLevel)
		}

		if 	*in.MaxPods != 0 {
			out[i]["max_pods"] = flattenInt32(*in.MaxPods)
		}

		if 	*in.NetworkPluginMTU != 0 {
			out[i]["network_plugin_mtu"] = flattenInt32(*in.NetworkPluginMTU)
		}

		if 	in.NetworkPluginName != "" {
			out[i]["network_plugin_name"] = flattenString(in.NetworkPluginName)
		}

		if 	in.NodeLabels != nil {
			out[i]["node_labels"] = flattenStringMap(in.NodeLabels)
		}

		if 	in.NodeStatusUpdateFrequency != nil {
			out[i]["node_status_update_frequency"] = flattenDuration(in.NodeStatusUpdateFrequency)
		}

		if 	in.NonMasqueradeCIDR != "" {
			out[i]["non_masquerade_cidr"] = flattenString(in.NonMasqueradeCIDR)
		}

		if 	in.NvidiaGPUs != 0 {
			out[i]["nvidia_gp_uss"] = flattenInt32(in.NvidiaGPUs)
		}

		if 	in.PodCIDR != "" {
			out[i]["pod_cidr"] = flattenString(in.PodCIDR)
		}

		if 	in.PodInfraContainerImage != "" {
			out[i]["pod_infra_container_image"] = flattenString(in.PodInfraContainerImage)
		}

		if 	in.PodManifestPath != "" {
			out[i]["pod_manifest_path"] = flattenString(in.PodManifestPath)
		}

		if 	*in.ReadOnlyPort != 0 {
			out[i]["read_only_port"] = flattenInt32(*in.ReadOnlyPort)
		}

		if 	*in.ReconcileCIDR {
			out[i]["reconcile_cidr"] = flattenBool(in.ReconcileCIDR)
		}

		if 	*in.RegisterNode {
			out[i]["register_node"] = flattenBool(in.RegisterNode)
		}

		if 	*in.RegisterSchedulable {
			out[i]["register_schedulable"] = flattenBool(in.RegisterSchedulable)
		}

		if 	*in.RegistryBurst != 0 {
			out[i]["registry_burst"] = flattenInt32(*in.RegistryBurst)
		}

		if 	*in.RegistryPullQPS != 0 {
			out[i]["registry_pull_qps"] = flattenInt32(*in.RegistryPullQPS)
		}

		if 	*in.RequireKubeconfig {
			out[i]["require_kubeconfig"] = flattenBool(in.RequireKubeconfig)
		}

		if 	*in.ResolverConfig != "" {
			out[i]["resolv_conf"] = flattenString(*in.ResolverConfig)
		}

		if 	in.RootDir != "" {
			out[i]["root_dir"] = flattenString(in.RootDir)
		}

		if 	in.RuntimeCgroups != "" {
			out[i]["runtime_cgroups"] = flattenString(in.RuntimeCgroups)
		}

		if 	in.RuntimeRequestTimeout != nil {
			out[i]["runtime_request_timeout"] = flattenDuration(in.RuntimeRequestTimeout)
		}

		if 	*in.SeccompProfileRoot != "" {
			out[i]["seccomp_profile_root"] = flattenString(*in.SeccompProfileRoot)
		}

		if 	*in.SerializeImagePulls {
			out[i]["serialize_image_pulls"] = flattenBool(in.SerializeImagePulls)
		}

		if 	in.StreamingConnectionIdleTimeout != nil {
			out[i]["streaming_connection_idle_timeout"] = flattenDuration(in.StreamingConnectionIdleTimeout)
		}

		if 	in.SystemCgroups != "" {
			out[i]["system_cgroups"] = flattenString(in.SystemCgroups)
		}

		if 	in.SystemReserved != nil {
			out[i]["system_reserved"] = flattenStringMap(in.SystemReserved)
		}

		if 	in.SystemReservedCgroup != "" {
			out[i]["system_reserved_cgroup"] = flattenString(in.SystemReservedCgroup)
		}

		if 	in.TLSCertFile != "" {
			out[i]["tls_cert_file"] = flattenString(in.TLSCertFile)
		}

		if 	in.TLSCipherSuites != nil {
			out[i]["tls_cipher_suites"] = flattenStringSlice(in.TLSCipherSuites)
		}

		if 	in.TLSMinVersion != "" {
			out[i]["tls_min_version"] = flattenString(in.TLSMinVersion)
		}

		if 	in.TLSPrivateKeyFile != "" {
			out[i]["tls_private_key_file"] = flattenString(in.TLSPrivateKeyFile)
		}

		if 	in.Taints != nil {
			out[i]["taints"] = flattenStringSlice(in.Taints)
		}

		if 	in.VolumePluginDirectory != "" {
			out[i]["volume_plugin_directory"] = flattenString(in.VolumePluginDirectory)
		}

		if 	in.VolumeStatsAggPeriod != nil {
			out[i]["volume_stats_agg_period"] = flattenDuration(in.VolumeStatsAggPeriod)
		}
	}

	return out
}

func flattenManagedFieldsEntrySlice(in []v1.ManagedFieldsEntry) []map[string]interface{} {
	out := make([]map[string]interface{}, len(in))

	for i := 0; i < len(out); i++ {
		out[i] = make(map[string]interface{})

		if 	in[i].APIVersion != "" {
			out[i]["api_version"] = flattenString(in[i].APIVersion)
		}

		if 	in[i].Fields != nil {
			out[i]["fields"] = flattenFields(in[i].Fields)
		}

		if 	in[i].Manager != "" {
			out[i]["manager"] = flattenString(in[i].Manager)
		}

		if 	in[i].Operation != "" {
			out[i]["operation"] = flattenManagedFieldsOperationType(in[i].Operation)
		}

		if 	in[i].Time.String() != "" {
			out[i]["time"] = flattenTime(*in[i].Time)
		}
	}

	return out
}

func flattenObjectMeta(in v1.ObjectMeta) []map[string]interface{} {
	out := make([]map[string]interface{}, 1)

	for i := 0; i < len(out); i++ {
		out[i] = make(map[string]interface{})

		if 	in.Annotations != nil {
			out[i]["annotations"] = flattenStringMap(in.Annotations)
		}

		if 	in.ClusterName != "" {
			out[i]["cluster_name"] = flattenString(in.ClusterName)
		}

		if 	in.CreationTimestamp.String() != "" {
			out[i]["creation_timestamp"] = flattenTime(in.CreationTimestamp)
		}

		if 	*in.DeletionGracePeriodSeconds != 0 {
			out[i]["deletion_grace_period_seconds"] = flattenInt64(*in.DeletionGracePeriodSeconds)
		}

		if 	in.DeletionTimestamp.String() != "" {
			out[i]["deletion_timestamp"] = flattenTime(*in.DeletionTimestamp)
		}

		if 	in.Finalizers != nil {
			out[i]["finalizers"] = flattenStringSlice(in.Finalizers)
		}

		if 	in.GenerateName != "" {
			out[i]["generate_name"] = flattenString(in.GenerateName)
		}

		if 	in.Generation != 0 {
			out[i]["generation"] = flattenInt64(in.Generation)
		}

		if 	in.Initializers != nil {
			out[i]["initializers"] = flattenInitializers(in.Initializers)
		}

		if 	in.Labels != nil {
			out[i]["labels"] = flattenStringMap(in.Labels)
		}

		if 	in.ManagedFields != nil {
			out[i]["managed_fields"] = flattenManagedFieldsEntrySlice(in.ManagedFields)
		}

		if 	in.Name != "" {
			out[i]["name"] = flattenString(in.Name)
		}

		if 	in.Namespace != "" {
			out[i]["namespace"] = flattenString(in.Namespace)
		}

		if 	in.OwnerReferences != nil {
			out[i]["owner_references"] = flattenOwnerReferenceSlice(in.OwnerReferences)
		}

		if 	in.ResourceVersion != "" {
			out[i]["resource_version"] = flattenString(in.ResourceVersion)
		}

		if 	in.SelfLink != "" {
			out[i]["self_link"] = flattenString(in.SelfLink)
		}

		if 	in.UID != "" {
			out[i]["uid"] = flattenUID(in.UID)
		}
	}

	return out
}

func flattenOwnerReferenceSlice(in []v1.OwnerReference) []map[string]interface{} {
	out := make([]map[string]interface{}, len(in))

	for i := 0; i < len(out); i++ {
		out[i] = make(map[string]interface{})

		out[i]["api_version"] = flattenString(in[i].APIVersion)

		if 	*in[i].BlockOwnerDeletion {
			out[i]["block_owner_deletion"] = flattenBool(in[i].BlockOwnerDeletion)
		}

		if 	*in[i].Controller {
			out[i]["controller"] = flattenBool(in[i].Controller)
		}

		out[i]["kind"] = flattenString(in[i].Kind)

		out[i]["name"] = flattenString(in[i].Name)

		out[i]["uid"] = flattenUID(in[i].UID)
	}

	return out
}

func flattenString(in string) interface{} {
	out := in

	return out
}

func flattenStringMap(in map[string]string) map[string]interface{} {
	out := make(map[string]interface{})

	for k, v := range in {
		out[k] = v
	}

	return out
}

func flattenStringSlice(in []string) []interface{} {
	out := make([]interface{}, len(in))

	for i := 0; i < len(out); i++ {
		out[i] = in[i]
	}

	return out
}

func flattenUID(in types.UID) interface{} {
	out := in

	return out
}
