// Code generated by engine.go; DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform/helper/schema"
	// "github.com/hashicorp/terraform/helper/validation"
)

func resourceInstanceGroup() *schema.Resource {
	return &schema.Resource{
		Create: resourceInstanceGroupCreate,
		Read:   resourceInstanceGroupRead,
		Update: resourceInstanceGroupUpdate,
		Delete: resourceInstanceGroupDelete,
		Exists: resourceInstanceGroupExists,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"api_version": schemaOptionalString(),
			"kind": schemaOptionalString(),
			"metadata": schemaObjectMeta(),
			"spec": schemaInstanceGroupSpec(),
		},
	}
}

func datasourceInstanceGroup() *schema.Resource {
	return &schema.Resource{
		Read: resourceInstanceGroupRead,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"api_version": schemaOptionalString(),
			"kind": schemaOptionalString(),
			"metadata": schemaObjectMeta(),
			"spec": schemaInstanceGroupSpec(),
		},
	}
}

func schemaIAMProfileSpec() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeList,
		MaxItems: 1,
		Optional: true,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				"profile": schemaOptionalString(),
			},
		},
	}
}

func schemaInstanceGroupSpec() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeList,
		MaxItems: 1,
		Optional: true,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				"additional_security_groups": schemaOptionalStringSlice(),
				"additional_user_data": schemaUserDataSlice(),
				"associate_public_ip": schemaOptionalBool(),
				"cloud_labels": schemaOptionalStringMap(),
				"detailed_instance_monitoring": schemaOptionalBool(),
				"external_load_balancers": schemaLoadBalancerSlice(),
				"file_assets": schemaFileAssetSpecSlice(),
				"hooks": schemaHookSpecSlice(),
				"iam": schemaIAMProfileSpec(),
				"image": schemaOptionalString(),
				"instance_protection": schemaOptionalBool(),
				"kubelet": schemaKubeletConfigSpec(),
				"machine_type": schemaOptionalString(),
				"max_price": schemaOptionalString(),
				"max_size": schemaOptionalInt(),
				"min_size": schemaOptionalInt(),
				"mixed_instances_policy": schemaMixedInstancesPolicySpec(),
				"node_labels": schemaOptionalStringMap(),
				"role": schemaOptionalInstanceGroupRole(),
				"root_volume_iops": schemaOptionalInt(),
				"root_volume_optimization": schemaOptionalBool(),
				"root_volume_size": schemaOptionalInt(),
				"root_volume_type": schemaOptionalString(),
				"security_group_override": schemaOptionalString(),
				"subnets": schemaOptionalStringSlice(),
				"suspend_processes": schemaOptionalStringSlice(),
				"taints": schemaOptionalStringSlice(),
				"tenancy": schemaOptionalString(),
				"volume_mounts": schemaVolumeMountSpecSlice(),
				"volumes": schemaVolumeSpecSlice(),
				"zones": schemaOptionalStringSlice(),
			},
		},
	}
}

func schemaLoadBalancerSlice() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeList,
		Optional: true,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				"load_balancer_name": schemaOptionalString(),
				"target_group_arn": schemaOptionalString(),
			},
		},
	}
}

func schemaMixedInstancesPolicySpec() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeList,
		MaxItems: 1,
		Optional: true,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				"instances": schemaOptionalStringSlice(),
				"on_demand_above_base": schemaOptionalFloat(),
				"on_demand_allocation_strategy": schemaOptionalString(),
				"on_demand_base": schemaOptionalFloat(),
				"spot_allocation_strategy": schemaOptionalString(),
				"spot_instance_pools": schemaOptionalFloat(),
			},
		},
	}
}

func schemaOptionalInstanceGroupRole() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeString,
		Optional: true,
	}
}

func schemaUserDataSlice() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeList,
		Optional: true,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				"content": schemaOptionalString(),
				"name": schemaOptionalString(),
				"type": schemaOptionalString(),
			},
		},
	}
}

func schemaVolumeMountSpecSlice() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeList,
		Optional: true,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				"device": schemaOptionalString(),
				"filesystem": schemaOptionalString(),
				"format_options": schemaOptionalStringSlice(),
				"mount_options": schemaOptionalStringSlice(),
				"path": schemaOptionalString(),
			},
		},
	}
}

func schemaVolumeSpecSlice() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeList,
		Optional: true,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				"device": schemaOptionalString(),
				"encrypted": schemaOptionalBool(),
				"iops": schemaOptionalFloat(),
				"size": schemaOptionalFloat(),
				"type": schemaOptionalString(),
			},
		},
	}
}