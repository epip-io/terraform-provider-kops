// Code generated by engine.go; DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform/helper/schema"
	// "github.com/hashicorp/terraform/helper/validation"
)


func schemaFileAssetSpecSlice() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeList,
		Optional: true,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				"content": schemaOptionalString(),
				"is_base_64": schemaOptionalBool(),
				"name": schemaOptionalString(),
				"path": schemaOptionalString(),
				"roles": schemaOptionalInstanceGroupRoleSlice(),
			},
		},
	}
}

func schemaHookSpecSlice() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeList,
		Optional: true,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				"before": schemaOptionalStringSlice(),
				"disabled": schemaOptionalBool(),
				"exec_container": schemaExecContainerAction(),
				"manifest": schemaOptionalString(),
				"name": schemaOptionalString(),
				"requires": schemaOptionalStringSlice(),
				"roles": schemaOptionalInstanceGroupRoleSlice(),
				"use_raw_manifest": schemaOptionalBool(),
			},
		},
	}
}

func schemaInitializers() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeList,
		MaxItems: 1,
		Optional: true,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				"pending": schemaInitializerSlice(),
				"result": schemaStatus(),
			},
		},
	}
}

func schemaKubeletConfigSpec() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeList,
		MaxItems: 1,
		Optional: true,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				"api_servers": schemaOptionalString(),
				"allow_privileged": schemaOptionalBool(),
				"allowed_unsafe_sysctls": schemaOptionalStringSlice(),
				"anonymous_auth": schemaOptionalBool(),
				"authentication_token_webhook": schemaOptionalBool(),
				"authentication_token_webhook_cache_ttl": schemaDuration(),
				"authorization_mode": schemaOptionalString(),
				"babysit_daemons": schemaOptionalBool(),
				"bootstrap_kubeconfig": schemaOptionalString(),
				"cpu_cfs_quota": schemaOptionalBool(),
				"cpu_cfs_quota_period": schemaDuration(),
				"cgroup_root": schemaOptionalString(),
				"client_ca_file": schemaOptionalString(),
				"cloud_provider": schemaOptionalString(),
				"cluster_dns": schemaOptionalString(),
				"cluster_domain": schemaOptionalString(),
				"configure_cbr_0": schemaOptionalBool(),
				"cpu_manager_policy": schemaOptionalString(),
				"docker_disable_shared_pid": schemaOptionalBool(),
				"enable_custom_metrics": schemaOptionalBool(),
				"enable_debugging_handlers": schemaOptionalBool(),
				"enforce_node_allocatable": schemaOptionalString(),
				"eviction_hard": schemaOptionalString(),
				"eviction_max_pod_grace_period": schemaOptionalInt(),
				"eviction_minimum_reclaim": schemaOptionalString(),
				"eviction_pressure_transition_period": schemaDuration(),
				"eviction_soft": schemaOptionalString(),
				"eviction_soft_grace_period": schemaOptionalString(),
				"experimental_allowed_unsafe_sysctls": schemaOptionalStringSlice(),
				"fail_swap_on": schemaOptionalBool(),
				"feature_gates": schemaOptionalStringMap(),
				"hairpin_mode": schemaOptionalString(),
				"hostname_override": schemaOptionalString(),
				"image_gc_high_threshold_percent": schemaOptionalInt(),
				"image_gc_low_threshold_percent": schemaOptionalInt(),
				"image_pull_progress_deadline": schemaDuration(),
				"kube_reserved": schemaOptionalStringMap(),
				"kube_reserved_cgroup": schemaOptionalString(),
				"kubeconfig_path": schemaOptionalString(),
				"kubelet_cgroups": schemaOptionalString(),
				"log_level": schemaOptionalInt(),
				"max_pods": schemaOptionalInt(),
				"network_plugin_mtu": schemaOptionalInt(),
				"network_plugin_name": schemaOptionalString(),
				"node_labels": schemaOptionalStringMap(),
				"node_status_update_frequency": schemaDuration(),
				"non_masquerade_cidr": schemaOptionalString(),
				"nvidia_gp_uss": schemaOptionalInt(),
				"pod_cidr": schemaOptionalString(),
				"pod_infra_container_image": schemaOptionalString(),
				"pod_manifest_path": schemaOptionalString(),
				"read_only_port": schemaOptionalInt(),
				"reconcile_cidr": schemaOptionalBool(),
				"register_node": schemaOptionalBool(),
				"register_schedulable": schemaOptionalBool(),
				"registry_burst": schemaOptionalInt(),
				"registry_pull_qps": schemaOptionalInt(),
				"require_kubeconfig": schemaOptionalBool(),
				"resolv_conf": schemaOptionalString(),
				"root_dir": schemaOptionalString(),
				"runtime_cgroups": schemaOptionalString(),
				"runtime_request_timeout": schemaDuration(),
				"seccomp_profile_root": schemaOptionalString(),
				"serialize_image_pulls": schemaOptionalBool(),
				"streaming_connection_idle_timeout": schemaDuration(),
				"system_cgroups": schemaOptionalString(),
				"system_reserved": schemaOptionalStringMap(),
				"system_reserved_cgroup": schemaOptionalString(),
				"tls_cert_file": schemaOptionalString(),
				"tls_cipher_suites": schemaOptionalStringSlice(),
				"tls_min_version": schemaOptionalString(),
				"tls_private_key_file": schemaOptionalString(),
				"taints": schemaOptionalStringSlice(),
				"volume_plugin_directory": schemaOptionalString(),
				"volume_stats_agg_period": schemaDuration(),
			},
		},
	}
}

func schemaManagedFieldsEntrySlice() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeList,
		Optional: true,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				"api_version": schemaOptionalString(),
				"fields": schemaFields(),
				"manager": schemaOptionalString(),
				"operation": schemaOptionalManagedFieldsOperationType(),
				"time": schemaTime(),
			},
		},
	}
}

func schemaObjectMeta() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeList,
		MaxItems: 1,
		Optional: true,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				"annotations": schemaOptionalStringMap(),
				"cluster_name": schemaOptionalString(),
				"creation_timestamp": schemaTime(),
				"deletion_grace_period_seconds": schemaOptionalFloat(),
				"deletion_timestamp": schemaTime(),
				"finalizers": schemaOptionalStringSlice(),
				"generate_name": schemaOptionalString(),
				"generation": schemaOptionalFloat(),
				"initializers": schemaInitializers(),
				"labels": schemaOptionalStringMap(),
				"managed_fields": schemaManagedFieldsEntrySlice(),
				"name": schemaOptionalString(),
				"namespace": schemaOptionalString(),
				"owner_references": schemaOwnerReferenceSlice(),
				"resource_version": schemaOptionalString(),
				"self_link": schemaOptionalString(),
				"uid": schemaOptionalUID(),
			},
		},
	}
}

func schemaOptionalBool() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeBool,
		Optional: true,
	}
}

func schemaOptionalFloat() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeFloat,
		Optional: true,
	}
}

func schemaOptionalInt() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeInt,
		Optional: true,
	}
}

func schemaOptionalString() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeString,
		Optional: true,
	}
}

func schemaOptionalStringMap() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeMap,
		Optional: true,
		Elem: &schema.Schema{
			Type : schema.TypeString,
		},
	}
}

func schemaOptionalStringSlice() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeList,
		Optional: true,
		Elem: &schema.Schema{
			Type : schema.TypeString,
		},
	}
}

func schemaOptionalUID() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeString,
		Optional: true,
	}
}

func schemaOwnerReferenceSlice() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeList,
		Optional: true,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				"api_version": schemaRequiredString(),
				"block_owner_deletion": schemaOptionalBool(),
				"controller": schemaOptionalBool(),
				"kind": schemaRequiredString(),
				"name": schemaRequiredString(),
				"uid": schemaRequiredUID(),
			},
		},
	}
}

func schemaTime() *schema.Schema {
	return &schema.Schema{
		Type: schema.TypeList,
		MaxItems: 1,
		Optional: true,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
			},
		},
	}
}